>>> name = [['alex',26,'技术部','工程师',13651054608],['shanshan',25,'公关部','夜魔',13374245235],['龙庭',24,'设计部','UI',138242234452]]
>>> name.index(['龙庭',24,'设计部','UI',138242234452])
2
数据类型-字典
字典一种key -yalue的数据类型，使用就像我们上学用的字典，通过笔划，字母来查找对应项的详细内容

特征
    key-value结构
    key必须可以hash，且必须微不可变数据类型，必须唯一
    可存放任意多个值，可修改，可以不唯一
    无序
    查找速度快

info = {
        'stu1101':"tenglan wu",
        'stu1102':"longze ",
        'stu1103': "tangsha"
       }
>>> infos = { 'alex':[26,'技术部','工程师',13651054608],'shanshan':[25,'公关部','夜魔',13374245235],'longting':[24,'设计部','UI',138242234452] }
>>> infos
{'alex': [26, '技术部', '工程师', 13651054608], 'shanshan': [25, '公关部', '夜魔', 13374245235], 'longting': [24, '设计部', 'UI', 138242234452]}
>>> infos['alex']
[26, '技术部', '工程师', 13651054608]
>>> infos['alex'][3]
13651054608
>>> infos ['kevin'] = 'sheji'  增加字典数据
>>> infos
{'alex': [26, '技术部', '工程师', 13651054608], 'shanshan': [25, '公关部', '夜魔', 13374245235], 'longting': [24, '设计部', 'UI', 138242234452], 'kevin': 'sheji'}
>>> infos['kevin']='v6'  修改
>>> infos
{'alex': [26, '技术部', '工程师', 13651054608], 'shanshan': [25, '公关部', '夜魔', 13374245235], 'longting': [24, '设计部', 'UI', 138242234452], 'kevin': 'v6'}


>>> a.sort()
>>> a
[-3234, 3456, 4567, 23456]

字典用法
>>> infos ['kevin'] = 'sheji'  增加字典数据
>>> infos
{'alex': [26, '技术部', '工程师', 13651054608], 'shanshan': [25, '公关部', '夜魔', 13374245235], 'longting': [24, '设计部', 'UI', 138242234452], 'kevin': 'sheji'}
>>> infos['kevin']='v6'  修改
>>> infos
{'alex': [26, '技术部', '工程师', 13651054608], 'shanshan': [25, '公关部', '夜魔', 13374245235], 'longting': [24, '设计部', 'UI', 138242234452], 'kevin': 'v6'}
>>> 'kevin' in infos  判断这个是不是在字典里  标准用法
True
>>> infos.get('alex')   快速获取
[26, '技术部', '工程师', 13651054608]
>>> infos['joyuy']                如果一个key不存在，就报错，get不会报错，不存在只会返回None
Traceback (most recent call last):
  File "<input>", line 1, in <module>
KeyError: 'joyuy'
>>> infos.pop('kevin')  删除一个值，返回被删除的值
'v6'
>>> infos.popitem()   随机删除
('longting', [24, '设计部', 'UI', 138242234452])
>>> for  i in range(100,150):
...     info[i] = i*i
...
>>> info
{'stu1101': 'tenglan wu', 'stu1102': 'longze ', 'stu1103': 'tangsha', 100: 10000, 101: 10201, 102: 10404, 103: 10609, 104: 10816, 105: 11025, 106: 11236,
 107: 11449, 108: 11664, 109: 11881, 110: 12100, 111: 12321, 112: 12544, 113: 12769, 114: 12996, 115: 13225, 116: 13456, 117: 13689, 118: 13924, 119: 14161,
 120: 14400, 121: 14641, 122: 14884, 123: 15129, 124: 15376, 125: 15625, 126: 15876, 127: 16129, 128: 16384, 129: 16641, 130: 16900, 131: 17161, 132: 17424,
 133: 17689, 134: 17956, 135: 18225, 136: 18496, 137: 18769, 138: 19044, 139: 19321, 140: 19600, 141: 19881, 142: 20164, 143: 20449, 144: 20736, 145: 21025,
  146: 21316, 147: 21609, 148: 21904, 149: 22201}
>>> info.popitem()
(149, 22201)
>>> info.popitem()
(148, 21904)
>>> info.popitem()
(147, 21609)
>>> del info[102]  有选择的型删除
>>> info
{'stu1101': 'tenglan wu', 'stu1102': 'longze ', 'stu1103': 'tangsha', 100: 10000, 101: 10201, 103: 10609, 104: 10816, 105: 11025, 106: 11236, 107: 11449, 108: 11664, 109: 11881, 110: 12100, 111: 12321, 112: 12544, 113: 12769, 114: 12996, 115: 13225, 116: 13456, 117: 13689, 118: 13924, 119: 14161, 120: 14400, 121: 14641, 122: 14884, 123: 15129, 124: 15376, 125: 15625, 126: 15876, 127: 16129, 128: 16384, 129: 16641, 130: 16900, 131: 17161, 132: 17424, 133: 17689, 134: 17956, 135: 18225, 136: 18496, 137: 18769, 138: 19044, 139: 19321, 140: 19600, 141: 19881, 142: 20164, 143: 20449, 144: 20736, 145: 21025, 146: 21316}
>>> info.clear()  清空列表



多级自定嵌套

>>> info = {'alex':[24,'IT'],'rain':[34,'HR'],'jack':22}
>>> info
{'alex': [24, 'IT'], 'rain': [34, 'HR'], 'jack': 22}
>>> info.keys()     打印所有key
dict_keys(['alex', 'rain', 'jack'])

>>> info.values()
dict_values([[24, 'IT'], [34, 'HR'], 22])

>>> info.items()    把字典里面的key和values转成一个小列表列表
dict_items([('alex', [24, 'IT']), ('rain', [34, 'HR']), ('jack', 22)])

>>> info
{'alex': [24, 'IT'], 'rain': [34, 'HR'], 'jack': 22}
>>> dit = {1:2,2:3,'jack':[22,'jack ma ','alibaba ceo']}
>>> info.update(dit)     他会把原来的值覆盖掉
>>> info
{'alex': [24, 'IT'], 'rain': [34, 'HR'], 'jack': [22, 'jack ma ', 'alibaba ceo'], 1: 2, 2: 3}
>>> info.setdefault('alex')   r如果有这个值 就get下来，没有这个 就会创建
[24, 'IT']
>>> info.setdefault(2,'new 2')
3

>>> info.fromkeys(['a','b','c'])    批量生产一个字典
{'a': None, 'b': None, 'c': None}
>>> info.fromkeys(['a','b','c'],'kevin')
{'a': 'kevin', 'b': 'kevin', 'c': 'kevin'}


>>> info
{'alex': [24, 'IT'], 'rain': [34, 'HR'], 'jack': [22, 'jack ma ', 'alibaba ceo'], 1: 2, 2: 3}
>>> for k in info:
...     print(k)
...
alex
rain
jack
1
2

>>> for k in info:
...     print(k,info[k])
...
alex [24, 'IT']
rain [34, 'HR']
jack [22, 'jack ma ', 'alibaba ceo']
1 2
2 3

>>> info.items()
dict_items([('alex', [24, 'IT']), ('rain', [34, 'HR']), ('jack', [22, 'jack ma ', 'alibaba ceo']), (1, 2), (2, 3)])
>>> for k in info:    低效for循环
...     print(k,info[k])
...
alex [24, 'IT']
rain [34, 'HR']
jack [22, 'jack ma ', 'alibaba ceo']
1 2
2 3
