>>> iphone7 = {'alex','rain','jack','kevin'}
>>> iphone8 = {'alex','shanshan','jack','joyy'}

集合关系测试
    交集
    差集
    并集
    对称差集
================  交集   ====================
>>> iphone7 = {'alex','rain','jack','kevin'}
>>> iphone8 = {'alex','shanshan','jack','joyy'}
>>> iphone7.intersection(iphone8)   交集
{'jack', 'alex'}

>>> iphone7 & iphone8
{'jack', 'alex'}

================  差集   ====================
>>> iphone7.difference(iphone8)
{'rain', 'kevin'}
>>> iphone7 - iphone8
{'rain', 'kevin'}
>>> iphone8.difference(iphone7)
{'shanshan', 'joyy'}
>>> iphone8 - iphone7
{'shanshan', 'joyy'}

================   并集   ====================  把重复的去掉
>>> iphone7.union(iphone8)
{'shanshan', 'rain', 'kevin', 'alex', 'joyy', 'jack'}
>>> iphone7 | iphone8
{'shanshan', 'rain', 'kevin', 'alex', 'joyy', 'jack'}


================   对称差集   ====================     对称差集
>>> iphone7.symmetric_difference(iphone8)
{'shanshan', 'rain', 'kevin', 'joyy'}


包含关系
ln,not in 判断某个元素是否在集合内 ==,!= 判断两个集合是否相等
两个集合之间一般有三种关系，相交，包含，不相交，在python中分别用下面的方法判断

>>> s2.isdisjoint(s)     判断两个集合是不是不相交
False
>>> s.issuperset(s2)      判断集合是不是包含其他集合，等同于a>=b
False
>>> s.issubset(s2)        判断集合是不是被其他集合包含，等同于a<=b
True

>>> s.issubset(s2)
True
>>> s.issuperset(s2)
False

================   ****   ====================
>>> s.add(-2)
>>> s.difference(s2)
{-1}
>>> s.add(-3)
>>> s.difference(s2)
{-3, -1}
>>> s.difference_update(s2)
>>> s
{-3, -1}
