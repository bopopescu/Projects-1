#!/usr/bin/env python3
#encoding=utf-8
# kevim 
# lau.liu@9street.org
'''
def cale(n):
    print(n)
    return  cale(n+1)
cale(0)
'''
"""
递归特性:
1. 必须有一个明确的结束条件
2. 每次进入更深一层递归时，问题规模相比上次递归都应有所减少
3. 递归效率不高，递归层次过多会导致栈溢出（在计算机中，函数调用是通过栈（stack）
这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，
每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出）
"""
def calc(n):
    print(n)
    if int(n/2) > 0:
        return calc(int(n/2))
    print("--->",n)
calc(10)
"""
    函数是python内建支持的一种封装，我们通过把大段代码拆分成函数，通过一层一层的函数调用，就可以把复杂任务分解成简单的任务，这种分解就可以称之为面向过程的程序设计。函数就是面向过程的程序的基本单元。
    而函数式编程（请注意多了一个"式"字） ---functional Programming, 虽然也可以归结到面向过程的程序设计，但其思想更接近数学计算。
    我们首先要搞明白计算机（Computer）和 计算机（Computer）的概念。
    在计算的层次上，cpu执行的是加减乘除的指令代码，以及各种判断和跳转指令，所以，汇编语言最贴近计算机的语言。
    而计算则数学意义的计算，越是抽象的计算，里计算机硬件越远。
    对应到编程语言，就是越低级语言，越贴近计算机，抽象程度低，执行效率高，比如c语言；越高级的语言，也贴近计算，抽象程度高，执行效率低，比如Lisp语言。
    函数是编程就是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用，而循序使用变量的程序设计语言，由于函数内部的变量状态不确定，
同样输入，可能得到不同的输出，因此，这种函数没有副作用的。
    函数式编程的一个特点就是，允许把函授本身作为参数传入另一个函数，还允许返回一个函数
    python对函数式编程提供部分支持，由与python允许使用变量，因此，python不是纯函数是编程语言
    函数是Python内建支持的一种封装，我们通过把大段代码拆成函数，通过一层一层的函数调用，就可以把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计。函数就是面向过程的程序设计的基本单元。
    函数式编程中的函数这个术语不是指计算机中的函数（实际上是Subroutine），而是指数学中的函数，即自变量的映射。也就是说一个函数的值仅决定于函数参数的值，不依赖其他状态。比如sqrt(x)函数计算x的平方根，只要x不变，
不论什么时候调用，调用几次，值都是不变的。
一、定义
简单说，"函数式编程"是一种"编程范式"（programming paradigm），也就是如何编写程序的方法论。
主要思想是把运算过程尽量写成一系列嵌套的函数调用。举例来说，现在有这样一个数学表达式：
　　(1 + 2) * 3 - 4
传统的过程式编程，可能这样写：
　　var a = 1 + 2;
　　var b = a * 3;
　　var c = b - 4;
函数式编程要求使用函数，我们可以把运算过程定义为不同的函数，然后写成下面这样：
　　var result = subtract(multiply(add(1,2), 3), 4);
这段代码再演进以下，可以变成这样
add(1,2).multiply(3).subtract(4)
这基本就是自然语言的表达了。再看下面的代码，大家应该一眼就能明白它的意思吧：
merge([1,2],[3,4]).sort().search("2")
因此，函数式编程的代码更容易理解。
玩Erlang,Haskell 函数编程
"""